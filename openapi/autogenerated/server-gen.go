//go:build go1.22

// Package autogenerated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package autogenerated

import (
	"context"
	"encoding/json"
	"fmt"
	"net/http"
	"time"

	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

const (
	BearerJWTScopes = "BearerJWT.Scopes"
)

// Defines values for Permissions.
const (
	CreateSecret Permissions = "CreateSecret"
	DeleteSecret Permissions = "DeleteSecret"
	FullSecret   Permissions = "FullSecret"
	GetSecret    Permissions = "GetSecret"
	UpdateSecret Permissions = "UpdateSecret"
)

// ApiKeyCreated Response object returned after creating an API Key.
// Return the API Key.
type ApiKeyCreated struct {
	Apikey *string `json:"apikey,omitempty"`
}

// ApiKeyRequest TODO:
type ApiKeyRequest struct {
	Permissions *[]Permissions `json:"permissions"`
}

// Error Represents an error returned by the API.
// Contains the HTTP status code and a human-readable message.
type Error struct {
	// Message Description of the error
	Message *string `json:"message,omitempty"`

	// Status HTTP status code corresponding to the error
	Status *int `json:"status,omitempty"`
}

// Permissions defines model for Permissions.
type Permissions string

// Secret defines model for Secret.
type Secret struct {
	// Content => Secret content
	Content string `json:"content"`

	// CreatedAt When the secret was created
	CreatedAt *time.Time `json:"created_at,omitempty"`

	// Duration => Seconds left before auto deleting the secret
	Duration *int `json:"duration"`

	// Id Unique identifier of the secret
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Password => Password to access the secret
	Password *string `json:"password"`

	// Views => Remaining views before deleting the secret
	Views *int `json:"views"`
}

// SecretCreated Response object returned after creating a secret.
// Contains the URL that can be used to access the secret.
type SecretCreated struct {
	// Url URL to the secret
	Url *string `json:"url,omitempty"`
}

// SecretRequest Represents the user-provided input when creating a secret.
// This object does not include system-generated values like ID or timestamps.
type SecretRequest struct {
	// Content => Secret content
	Content string `json:"content"`

	// Duration => Seconds left before auto deleting the secret
	Duration *int `json:"duration"`

	// Password => Password to access the secret
	Password *string `json:"password"`

	// Views => Remaining views before deleting the secret
	Views *int `json:"views"`
}

// GetSecretJSONBody defines parameters for GetSecret.
type GetSecretJSONBody struct {
	// Password Password to access the secret (if required)
	Password *string `json:"password,omitempty"`
}

// CreateSecretJSONRequestBody defines body for CreateSecret for application/json ContentType.
type CreateSecretJSONRequestBody = SecretRequest

// GetSecretJSONRequestBody defines body for GetSecret for application/json ContentType.
type GetSecretJSONRequestBody GetSecretJSONBody

// GenerateApiKeyJSONRequestBody defines body for GenerateApiKey for application/json ContentType.
type GenerateApiKeyJSONRequestBody = ApiKeyRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a secret
	// (POST /secret)
	CreateSecret(w http.ResponseWriter, r *http.Request)
	// Delete a secret
	// (DELETE /secret/{id})
	DeleteSecret(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Retrieve a secret
	// (GET /secret/{id})
	GetSecret(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
	// Generate an API Key
	// (POST /user/api-key)
	GenerateApiKey(w http.ResponseWriter, r *http.Request)
	// Delete an API Key
	// (DELETE /user/api-key/{id})
	DeleteApiKey(w http.ResponseWriter, r *http.Request, id openapi_types.UUID)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CreateSecret operation middleware
func (siw *ServerInterfaceWrapper) CreateSecret(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerJWTScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSecret(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSecret operation middleware
func (siw *ServerInterfaceWrapper) DeleteSecret(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerJWTScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSecret(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSecret operation middleware
func (siw *ServerInterfaceWrapper) GetSecret(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerJWTScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSecret(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GenerateApiKey operation middleware
func (siw *ServerInterfaceWrapper) GenerateApiKey(w http.ResponseWriter, r *http.Request) {

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerJWTScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GenerateApiKey(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteApiKey operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiKey(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", r.PathValue("id"), &id, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "id", Err: err})
		return
	}

	ctx := r.Context()

	ctx = context.WithValue(ctx, BearerJWTScopes, []string{})

	r = r.WithContext(ctx)

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiKey(w, r, id)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("POST "+options.BaseURL+"/secret", wrapper.CreateSecret)
	m.HandleFunc("DELETE "+options.BaseURL+"/secret/{id}", wrapper.DeleteSecret)
	m.HandleFunc("GET "+options.BaseURL+"/secret/{id}", wrapper.GetSecret)
	m.HandleFunc("POST "+options.BaseURL+"/user/api-key", wrapper.GenerateApiKey)
	m.HandleFunc("DELETE "+options.BaseURL+"/user/api-key/{id}", wrapper.DeleteApiKey)

	return m
}

type UnauthorizedAccessErrorResponse struct {
}

type CreateSecretRequestObject struct {
	Body *CreateSecretJSONRequestBody
}

type CreateSecretResponseObject interface {
	VisitCreateSecretResponse(w http.ResponseWriter) error
}

type CreateSecret201JSONResponse SecretCreated

func (response CreateSecret201JSONResponse) VisitCreateSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSecret400JSONResponse Error

func (response CreateSecret400JSONResponse) VisitCreateSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSecret401Response = UnauthorizedAccessErrorResponse

func (response CreateSecret401Response) VisitCreateSecretResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteSecretRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteSecretResponseObject interface {
	VisitDeleteSecretResponse(w http.ResponseWriter) error
}

type DeleteSecret204Response struct {
}

func (response DeleteSecret204Response) VisitDeleteSecretResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteSecret401Response = UnauthorizedAccessErrorResponse

func (response DeleteSecret401Response) VisitDeleteSecretResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteSecret404JSONResponse Error

func (response DeleteSecret404JSONResponse) VisitDeleteSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSecretRequestObject struct {
	Id   openapi_types.UUID `json:"id"`
	Body *GetSecretJSONRequestBody
}

type GetSecretResponseObject interface {
	VisitGetSecretResponse(w http.ResponseWriter) error
}

type GetSecret200JSONResponse Secret

func (response GetSecret200JSONResponse) VisitGetSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSecret401Response = UnauthorizedAccessErrorResponse

func (response GetSecret401Response) VisitGetSecretResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type GetSecret403JSONResponse Error

func (response GetSecret403JSONResponse) VisitGetSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetSecret404JSONResponse Error

func (response GetSecret404JSONResponse) VisitGetSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetSecret410JSONResponse Error

func (response GetSecret410JSONResponse) VisitGetSecretResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(410)

	return json.NewEncoder(w).Encode(response)
}

type GenerateApiKeyRequestObject struct {
	Body *GenerateApiKeyJSONRequestBody
}

type GenerateApiKeyResponseObject interface {
	VisitGenerateApiKeyResponse(w http.ResponseWriter) error
}

type GenerateApiKey201JSONResponse ApiKeyCreated

func (response GenerateApiKey201JSONResponse) VisitGenerateApiKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type GenerateApiKey400JSONResponse Error

func (response GenerateApiKey400JSONResponse) VisitGenerateApiKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GenerateApiKey401Response = UnauthorizedAccessErrorResponse

func (response GenerateApiKey401Response) VisitGenerateApiKeyResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteApiKeyRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteApiKeyResponseObject interface {
	VisitDeleteApiKeyResponse(w http.ResponseWriter) error
}

type DeleteApiKey204Response struct {
}

func (response DeleteApiKey204Response) VisitDeleteApiKeyResponse(w http.ResponseWriter) error {
	w.WriteHeader(204)
	return nil
}

type DeleteApiKey401Response = UnauthorizedAccessErrorResponse

func (response DeleteApiKey401Response) VisitDeleteApiKeyResponse(w http.ResponseWriter) error {
	w.WriteHeader(401)
	return nil
}

type DeleteApiKey404JSONResponse Error

func (response DeleteApiKey404JSONResponse) VisitDeleteApiKeyResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Create a secret
	// (POST /secret)
	CreateSecret(ctx context.Context, request CreateSecretRequestObject) (CreateSecretResponseObject, error)
	// Delete a secret
	// (DELETE /secret/{id})
	DeleteSecret(ctx context.Context, request DeleteSecretRequestObject) (DeleteSecretResponseObject, error)
	// Retrieve a secret
	// (GET /secret/{id})
	GetSecret(ctx context.Context, request GetSecretRequestObject) (GetSecretResponseObject, error)
	// Generate an API Key
	// (POST /user/api-key)
	GenerateApiKey(ctx context.Context, request GenerateApiKeyRequestObject) (GenerateApiKeyResponseObject, error)
	// Delete an API Key
	// (DELETE /user/api-key/{id})
	DeleteApiKey(ctx context.Context, request DeleteApiKeyRequestObject) (DeleteApiKeyResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// CreateSecret operation middleware
func (sh *strictHandler) CreateSecret(w http.ResponseWriter, r *http.Request) {
	var request CreateSecretRequestObject

	var body CreateSecretJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSecret(ctx, request.(CreateSecretRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSecret")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSecretResponseObject); ok {
		if err := validResponse.VisitCreateSecretResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSecret operation middleware
func (sh *strictHandler) DeleteSecret(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteSecretRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSecret(ctx, request.(DeleteSecretRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSecret")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSecretResponseObject); ok {
		if err := validResponse.VisitDeleteSecretResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSecret operation middleware
func (sh *strictHandler) GetSecret(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request GetSecretRequestObject

	request.Id = id

	var body GetSecretJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSecret(ctx, request.(GetSecretRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSecret")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSecretResponseObject); ok {
		if err := validResponse.VisitGetSecretResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GenerateApiKey operation middleware
func (sh *strictHandler) GenerateApiKey(w http.ResponseWriter, r *http.Request) {
	var request GenerateApiKeyRequestObject

	var body GenerateApiKeyJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GenerateApiKey(ctx, request.(GenerateApiKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GenerateApiKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GenerateApiKeyResponseObject); ok {
		if err := validResponse.VisitGenerateApiKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteApiKey operation middleware
func (sh *strictHandler) DeleteApiKey(w http.ResponseWriter, r *http.Request, id openapi_types.UUID) {
	var request DeleteApiKeyRequestObject

	request.Id = id

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteApiKey(ctx, request.(DeleteApiKeyRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteApiKey")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteApiKeyResponseObject); ok {
		if err := validResponse.VisitDeleteApiKeyResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

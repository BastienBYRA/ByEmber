openapi: '3.0.4'

info:
  title: ByEmber API
  version: '1.0'
  description: A Secret Sharer, Open Source, free, and with everything you need.
  license:
    name: MIT
    url: https://opensource.org/license/mit

servers:
  - url: /

security:
  - BearerJWT: []

paths:
  /secret:
    post:
      summary: Create a secret
      description: |
        Create a secret, auto-generating an ID that will be used to read it.
      operationId: CreateSecret
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SecretRequest"
            example:
              content: my super secretive content
              password: admin
              views: 10
              duration: 3600
      responses:
        '201':
          description: Secret successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SecretCreated"
              example:
                id: "123e4567-e89b-12d3-a456-426614174000"
                expires_at: "2024-12-25T10:30:00Z"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        '401':
          $ref: '#/components/responses/UnauthorizedAccessError'

  /secret/{id}:
    get:
      summary: Retrieve a secret
      description: |
        Retrieve a secret by its ID. This operation decrements the view count.
        If the secret requires a password, it must be provided in the request body.
      operationId: GetSecret
      parameters:
        - name: id
          in: path
          required: true
          description: The UUID of the secret
          schema:
            type: string
            format: uuid
      requestBody:
        required: false
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  description: Password to access the secret (if required)
            example:
              password: admin
      responses:
        '200':
          description: Secret successfully retrieved
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Secret"
        '401':
          $ref: '#/components/responses/UnauthorizedAccessError'
        '403':
          description: Invalid password
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '404':
          description: Secret not found or expired
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        '410':
          description: Secret has no remaining views
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Delete a secret
      description: |
        Delete a secret by its ID. This operation is irreversible.
      operationId: DeleteSecret
      parameters:
        - name: id
          in: path
          required: true
          description: The UUID of the secret
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Secret successfully deleted
        '401':
          $ref: '#/components/responses/UnauthorizedAccessError'
        '404':
          description: Secret not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /user/api-key:
    post:
      summary: Generate an API Key
      description: |
        Generate an API Key with specific permissions (Permissions are not implemented yet; as of right now, a Key has full permissions).

        List of all permissions :
          - CreateSecret
          - GetSecret
          - DeleteSecret
      operationId: GenerateApiKey
      security:
        - BearerJWT: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ApiKeyRequest"
            example:
              # permissions: [GetSecret, DeleteSecret, FullSecret]
              duration: 3600
      responses:
        '201':
          description: API Key successfully created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiKeyCreated"
              example:
                id: "123e4567-e89b-12d3-a456-426614174000"
                key: "fadc4d0d7d7ca8acad97e92c7e25ef26ffe288d5356ec79a98766437371a3029"
        '400':
          description: Invalid request data
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Error"
        '401':
          $ref: '#/components/responses/UnauthorizedAccessError'
  /user/api-key/{id}:
    delete:
      summary: Delete an API Key
      description: |
        Delete an API Key by its ID. This operation is irreversible.
      operationId: DeleteApiKey
      security:
        - BearerJWT: []
      parameters:
        - name: id
          in: path
          required: true
          description: The UUID of the API Key
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: API Key successfully deleted
        '401':
          $ref: '#/components/responses/UnauthorizedAccessError'
        '404':
          description: API Key not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"      


components:
  securitySchemes:
    BearerJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY # TODO: Check whether we should use X-API-KEY or Authorization


  responses:
    UnauthorizedAccessError:
      description: Access token is missing or invalid

  schemas:
    SecretRequest:
      description: |
        Represents the user-provided input when creating a secret.
        This object does not include system-generated values like ID or timestamps.
      type: object
      properties:
        content:
          type: string
          description: => Secret content
        views:
          type: integer
          description: => Remaining views before deleting the secret
          nullable: true
        duration:
          type: integer
          description: => Seconds left before auto deleting the secret
          nullable: true
        password:
          type: string
          format: password
          description: => Password to access the secret
          nullable: true
      required:
        - content
        - views
        - duration

    Secret:
      description: |
        Represents the fully constructed secret as stored and managed by the application.
        Includes system-generated fields such as ID and creation timestamp.
      allOf:
        - $ref: '#/components/schemas/SecretRequest'
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: Unique identifier of the secret
            created_at:
              type: string
              format: date-time
              description: When the secret was created

    SecretCreated:
      description: |
        Response object returned after creating a secret.
        Contains the URL that can be used to access the secret.
      type: object
      properties:
        url:
          type: string
          description: URL to the secret

    ApiKeyRequest:
      description: |
        TODO:
      type: object
      properties:
        permissions:
          type: array
          items:
            $ref: '#/components/schemas/Permissions'
          nullable: true

    ApiKey:
      description: |
        Represents the fully constructed API Key as stored and managed by the application.
        Includes system-generated fields such as ID and creation timestamp.
      allOf:
        - $ref: '#/components/schemas/ApiKeyRequest'
        - type: object
          properties:
            id:
              type: string
              format: uuid
              description: Unique identifier of the secret
            created_at:
              type: string
              format: date-time
              description: When the secret was created

    ApiKeyCreated:
      description: |
        Response object returned after creating an API Key.
        Return the API Key.
      type: object
      properties:
        apikey:
          type: string

    Permissions:
      type: string
      enum:
        - CreateSecret
        - GetSecret
        - DeleteSecret
        - FullSecret
        - UpdateSecret
      
    Error:
      description: |
        Represents an error returned by the API.
        Contains the HTTP status code and a human-readable message.
      type: object
      properties:
        status:
          type: integer
          description: HTTP status code corresponding to the error
        message:
          type: string
          description: Description of the error

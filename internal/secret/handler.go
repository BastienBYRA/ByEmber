package secret

import (
	"encoding/json"
	"net/http"
	"time"

	openapi_autogen "bastienbyra.fr/bastienbyra/ByEmber/openapi/autogenerated"
	"github.com/google/uuid"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

type Handler struct {
	// Ici tu peux ajouter un service, un repo, etc.
}

func NewHandler() *Handler {
	return &Handler{}
}

// (POST /secret)
func (h *Handler) CreateSecret(w http.ResponseWriter, r *http.Request) {
	var secret openapi_autogen.Secret

	if r.Method != http.MethodPost {
		http.Error(w, "Unauthorized method.", http.StatusMethodNotAllowed)
		return
	}

	err := json.NewDecoder(r.Body).Decode(&secret)
	if err != nil {
		http.Error(w, "Invalid JSON.", http.StatusBadRequest)
		return
	}

	uuidValue := uuid.New()
	now := time.Now()

	secretResponse := openapi_autogen.SecretCreated{
		Id:        (*openapi_types.UUID)(&uuidValue),
		ExpiresAt: &now,
	}

	w.WriteHeader(http.StatusOK)
	_ = json.NewEncoder(w).Encode(secretResponse)
}

func (h *Handler) DeleteSecret(w http.ResponseWriter, r *http.Request, id uuid.UUID) {
	// Traitement de suppression
}

func (h *Handler) GetSecret(w http.ResponseWriter, r *http.Request, id uuid.UUID) {
	// Traitement de récupération
}

package secret

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	"bastienbyra.fr/bastienbyra/ByEmber/openapi/autogenerated"
	openapi_autogen "bastienbyra.fr/bastienbyra/ByEmber/openapi/autogenerated"
	"github.com/google/uuid"
)

type SecretHandler struct {
	service SecretService
}

func NewHandler() *SecretHandler {
	return &SecretHandler{}
}

// (POST /secret)
func (h *SecretHandler) CreateSecret(w http.ResponseWriter, r *http.Request) {
	var secretRequest openapi_autogen.SecretRequest

	if r.Method != http.MethodPost {
		http.Error(w, "Unauthorized method.", http.StatusMethodNotAllowed)
		return
	}

	err := json.NewDecoder(r.Body).Decode(&secretRequest)
	if err != nil {
		log.Fatal(err)
		http.Error(w, "Invalid JSON.", http.StatusBadRequest)
		return
	}

	secret := h.service.CreateSecret(secretRequest)
	url := fmt.Sprintf("http://localhost:8080/%s", secret.Id.String())
	secretCreated := autogenerated.SecretCreated{
		Url: &url,
	}

	w.WriteHeader(http.StatusOK)
	_ = json.NewEncoder(w).Encode(secretCreated)
}

func (h *SecretHandler) DeleteSecret(w http.ResponseWriter, r *http.Request, id uuid.UUID) {
	// Traitement de suppression
}

func (h *SecretHandler) GetSecret(w http.ResponseWriter, r *http.Request, id uuid.UUID) {
	// Traitement de récupération
}

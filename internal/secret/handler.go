package secret

import (
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	"bastienbyra.fr/bastienbyra/ByEmber/internal/config"
	"bastienbyra.fr/bastienbyra/ByEmber/openapi/autogenerated"
	"github.com/google/uuid"
)

type SecretHandler struct {
	service SecretService
}

func NewHandler(config *config.Config) *SecretHandler {
	return &SecretHandler{
		service: SecretService{
			secretRepository: SecretRepository{
				db: config.DB,
			},
			encyrptionService: config.EncryptionService,
		},
	}
}

// (POST /secret)
func (h *SecretHandler) CreateSecret(w http.ResponseWriter, r *http.Request) {
	var secretRequest autogenerated.SecretRequest

	ctx := r.Context()

	if r.Method != http.MethodPost {
		http.Error(w, "Unauthorized method.", http.StatusMethodNotAllowed)
		return
	}

	err := json.NewDecoder(r.Body).Decode(&secretRequest)
	if err != nil {
		log.Fatal(err)
		http.Error(w, "Invalid JSON.", http.StatusBadRequest)
		return
	}

	secret := h.service.CreateSecret(ctx, secretRequest)

	url := fmt.Sprintf("http://localhost:8080/secret/%s", secret.Id.String())
	secretCreated := autogenerated.SecretCreated{
		Url: &url,
	}

	w.WriteHeader(http.StatusOK)
	_ = json.NewEncoder(w).Encode(secretCreated)
}

// (DELETE /secret/{id})
func (h *SecretHandler) DeleteSecret(w http.ResponseWriter, r *http.Request, id uuid.UUID) {
	ctx := r.Context()

	if r.Method != http.MethodDelete {
		http.Error(w, "Unauthorized method.", http.StatusMethodNotAllowed)
		return
	}

	code, err := h.service.DeleteSecret(ctx, id)
	if err != nil {
		http.Error(w, err.Error(), code)
	}

	w.WriteHeader(http.StatusNoContent)
}

// (GET /secret/{id})
func (h *SecretHandler) GetSecret(w http.ResponseWriter, r *http.Request, id uuid.UUID) {
	ctx := r.Context()

	if r.Method != http.MethodGet {
		http.Error(w, "Unauthorized method.", http.StatusMethodNotAllowed)
		return
	}

	var data map[string]string
	json.NewDecoder(r.Body).Decode(&data)
	password := data["password"]

	secret, code, err := h.service.GetSecret(ctx, id.String(), password)
	if err != nil {
		http.Error(w, err.Error(), code)
	}

	w.WriteHeader(http.StatusOK)
	_ = json.NewEncoder(w).Encode(secret)
}

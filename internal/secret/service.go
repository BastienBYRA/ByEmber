package secret

import (
	"context"
	"crypto/sha256"
	"fmt"
	"time"

	"bastienbyra.fr/bastienbyra/ByEmber/openapi/autogenerated"
	"bastienbyra.fr/bastienbyra/ByEmber/utils"
	"github.com/google/uuid"
)

type SecretService struct {
	secretRepository  SecretRepository
	encyrptionService *utils.EncryptionService
}

func (s *SecretService) CreateSecret(context context.Context, secretRequest autogenerated.SecretRequest) autogenerated.Secret {
	uuidValue := uuid.New()
	now := time.Now()

	encryptedContent, err := s.encyrptionService.Encrypt([]byte(secretRequest.Content))
	if err != nil {
		fmt.Println(err)
		fmt.Println("ERROR D:")
	}

	hash := sha256.Sum256([]byte(*secretRequest.Password))
	hashPassword := fmt.Sprintf("%x", hash)

	secret := autogenerated.Secret{
		Id:        &uuidValue,
		Content:   encryptedContent,
		CreatedAt: &now,
		Duration:  secretRequest.Duration,
		Password:  &hashPassword,
		Views:     secretRequest.Views,
	}

	err = s.secretRepository.CreateSecret(context, &secret)
	if err != nil {
		fmt.Println("Failure while creating the secret %w", err)
	}

	return secret
}

package secret

import (
	"context"
	"database/sql"
	"fmt"

	"bastienbyra.fr/bastienbyra/ByEmber/openapi/autogenerated"
	"github.com/google/uuid"
)

type SecretRepository struct {
	db *sql.DB
}

func (r *SecretRepository) CreateSecret(ctx context.Context, s *autogenerated.Secret) error {
	query := `
		INSERT INTO secrets (id, content, created_at, duration, password, views)
		VALUES (?, ?, ?, ?, ?, ?)
	`

	_, err := r.db.ExecContext(ctx, query,
		s.Id.String(),
		s.Content,
		s.CreatedAt,
		s.Duration,
		s.Password,
		s.Views,
	)

	return err
}

func (r *SecretRepository) GetSecret(ctx context.Context, id string) (*autogenerated.Secret, error) {
	query := `
		SELECT id, content, created_at, duration, password, views
		FROM secrets
		WHERE id = ?
	`

	row := r.db.QueryRowContext(ctx, query, id)

	var s autogenerated.Secret
	var idStr string

	err := row.Scan(
		&idStr,
		&s.Content,
		&s.CreatedAt,
		&s.Duration,
		&s.Password,
		&s.Views,
	)

	if err != nil {
		if err == sql.ErrNoRows {
			return nil, nil
		}
		return nil, err
	}

	parsedUUID, err := uuid.Parse(idStr)
	if err != nil {
		return nil, err
	}
	s.Id = &parsedUUID

	return &s, nil
}

func (r *SecretRepository) DeleteSecret(ctx context.Context, id string) error {
	query := `
		DELETE FROM secrets
		WHERE id = ?
	`

	result, err := r.db.ExecContext(ctx, query, id)
	if err != nil {
		return err
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return err
	}

	if rowsAffected == 0 {
		return fmt.Errorf("no secret found with id %s", id)
	}

	return nil
}

func (r *SecretRepository) ReduceViewCountSecret(ctx context.Context, id string) error {
	query := `
		UPDATE secrets
		SET views = views - 1
		WHERE id = ? AND views > 0
	`

	result, err := r.db.ExecContext(ctx, query, id)
	if err != nil {
		return err
	}

	rowsAffected, err := result.RowsAffected()
	if err != nil {
		return err
	}

	if rowsAffected == 0 {
		return fmt.Errorf("no rows updated: either secret not found or views already zero")
	}

	return nil
}
